            // if (collector && !collector.ended) collector.stop();

          // let duration = new Date(song.duration * 1000).toISOString().substr(11, 8);

          // var react = await queue.textChannel.send(embed);
      //     await react.react("‚èØÔ∏è");
      //     await react.react("‚èπÔ∏è");
      //     await react.react("‚è≠Ô∏è");
      //     await react.react("üîÅ");
      //     await react.react("üîÄ");
      //     await react.react("üîá");
      //     await react.react("üîâ");
      //     await react.react("üîä");
      //     const filter = (reaction, user) => user.id !== message.client.user.id;
      //     var collector = react.createReactionCollector(filter, {
      //       time: song.duration > 0 ? song.duration * 1000 : 600000
      //     });

      //     collector.on("collect", (reaction, user) => {
      //       if (!queue) return;
      //       const member = message.guild.member(user);

      //       const { channel } = member.voice;
      //       const botChannel = member.guild.me.voice.channel;

      //       if (channel !== botChannel) {
      //         return message.channel
      //           .send(`${member}, You need to join the voice channel first!`)
      //           .then(msg => {
      //             msg.delete({ timeout: 5000 });
      //           })
      //           .catch(console.error);
      //       }

      //       switch (reaction.emoji.name) {
      //         case "‚èØÔ∏è":
      //           reaction.users.remove(user).catch(console.error);
      //           if (queue.playing) {
      //             queue.playing = !queue.playing;
      //             queue.connection.dispatcher.pause(true);
      //             queue.textChannel
      //               .send(
      //                 `<a:yes:765207711423004676> | ${user} has paused the music!`
      //               )
      //               .then(msg => {
      //                 msg.delete({ timeout: 5000 });
      //               })
      //               .catch(console.error);
      //           } else {
      //             queue.playing = !queue.playing;
      //             queue.connection.dispatcher.resume();
      //             queue.textChannel
      //               .send(
      //                 `<a:yes:765207711423004676> | ${user} has resumed the music!`
      //               )
      //               .then(msg => {
      //                 msg.delete({ timeout: 5000 });
      //               })
      //               .catch(console.error);
      //           }
      //           break;

      //         case "‚èπÔ∏è":
      //           reaction.users.remove(user).catch(console.error);
      //           queue.songs = [];
      //           queue.textChannel
      //             .send(
      //               `<a:yes:765207711423004676> | ${user} has stopped the music!`
      //             )
      //             .then(msg => {
      //               msg.delete({ timeout: 5000 });
      //             })
      //             .catch(console.error);
      //           try {
      //             queue.connection.dispatcher.end();
      //           } catch (error) {
      //             console.error(error);
      //             queue.connection.disconnect();
      //           }
      //           collector.stop();
      //           break;

      //         case "‚è≠Ô∏è":
      //           queue.playing = true;
      //           reaction.users.remove(user).catch(console.error);
      //           queue.connection.dispatcher.end();
      //           queue.textChannel
      //             .send(
      //               `<a:yes:765207711423004676> | ${user} has skipped the song!`
      //             )
      //             .then(msg => {
      //               msg.delete({ timeout: 5000 });
      //             })
      //             .catch(console.error);
      //           collector.stop();
      //           break;

      //         case "üîÅ":
      //           reaction.users.remove(user).catch(console.error);
      //           queue.loop = !queue.loop;
      //           queue.textChannel
      //             .send(
      //               `<a:yes:765207711423004676> | Loop is now ${
      //                 queue.loop ? `**\`On\`**` : `**\`Off\`**`
      //               }`
      //             )
      //             .then(msg => {
      //               msg.delete({ timeout: 5000 });
      //             })
      //             .catch(console.error);
      //           break;

      //         case "üîÄ":
      //           reaction.users.remove(user).catch(console.error);
      //           let songs = queue.songs;
      //           for (let i = songs.length - 1; i > 1; i--) {
      //             let j = 1 + Math.floor(Math.random() * i);
      //             [songs[i], songs[j]] = [songs[j], songs[i]];
      //           }
      //           queue.songs = songs;
      //           message.client.queue.set(message.guild.id, queue);
      //           queue.textChannel
      //             .send(
      //               `<a:yes:765207711423004676> | ${user} has shuffled the queue!`
      //             )
      //             .then(msg => {
      //               msg.delete({ timeout: 5000 });
      //             })
      //             .catch(console.error);
      //           break;

      //         case "üîá":
      //           reaction.users.remove(user).catch(console.error);
      //           if (queue.volume <= 0) {
      //             queue.volume = 100;
      //             queue.connection.dispatcher.setVolumeLogarithmic(100 / 100);
      //             queue.textChannel
      //               .send(
      //                 `<a:yes:765207711423004676> | ${user} has unmuted the music!`
      //               )
      //               .then(msg => {
      //                 msg.delete({ timeout: 5000 });
      //               })
      //               .catch(console.error);
      //           } else {
      //             queue.volume = 0;
      //             queue.connection.dispatcher.setVolumeLogarithmic(0);
      //             queue.textChannel
      //               .send(
      //                 `<a:yes:765207711423004676> | ${user} has muted the music!`
      //               )
      //               .then(msg => {
      //                 msg.delete({ timeout: 5000 });
      //               })
      //               .catch(console.error);
      //           }
      //           break;

      //         case "üîâ":
      //           reaction.users.remove(user).catch(console.error);
      //           if (queue.volume - 10 <= 0) queue.volume = 0;
      //           else queue.volume = queue.volume - 10;
      //           queue.connection.dispatcher.setVolumeLogarithmic(
      //             queue.volume / 100
      //           );
      //           queue.textChannel
      //             .send(
      //               `<a:yes:765207711423004676> | ${user} has decreased the volume to ${queue.volume}%`
      //             )
      //             .then(msg => {
      //               msg.delete({ timeout: 5000 });
      //             })
      //             .catch(console.error);
      //           break;

      //         case "üîä":
      //           reaction.users.remove(user).catch(console.error);
      //           if (queue.volume + 10 >= 100) queue.volume = 100;
      //           else queue.volume = queue.volume + 10;
      //           queue.connection.dispatcher.setVolumeLogarithmic(
      //             queue.volume / 100
      //           );
      //           queue.textChannel
      //             .send(
      //               `<a:yes:765207711423004676> | ${user} has increased the volume to ${queue.volume}%`
      //             )
      //             .then(msg => {
      //               msg.delete({ timeout: 5000 });
      //             })
      //             .catch(console.error);
      //           break;

      //         default:
      //           reaction.users.remove(user).catch(console.error);
      //           break;
      //       }
      //     });

      //     collector.on("end", () => {
      //       react.reactions.removeAll().catch(console.error);
      //     });